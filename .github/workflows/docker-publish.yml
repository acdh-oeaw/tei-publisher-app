name: TEI Publisher CI and Docker Snapshots

on:
  push:
    # Publish `master` as Docker `latest` image.
    branches:
      - master
      - 'release/*'

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  workflow_dispatch:

env:
  # TODO: Change variable to your image's name.
  IMAGE_NAME: teipublisher

jobs:
  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v2
      - name: Build docker image
        run: docker build -t exist-db -f Dockerfile .
      - name: Start docker image
        run: docker run --publish 8080:8080 --name db --detach exist-db
      - name: Run npm install
        run: npm install
      - name: Run tests
        run: npm test
      - name: Retrieve eXist log
        if: failure()
        run: docker cp db:/exist/logs/exist.log .
      - name: Publish log as artifact
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: exist.log
          path: ./exist.log
      - name: Stop docker
        run: docker stop db

  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    # Ensure test job passes before pushing image.
    needs: test

    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v2

      - name: Build image
        run: docker build . --file Dockerfile --tag $IMAGE_NAME --build-arg PUBLISHER_VERSION=master

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Push image
        run: |
          IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME
          
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=master

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
